Solution: constant dict (real fix)

from types import MappingProxyType

def deep_freeze(obj):
    if isinstance(obj, dict):
        return MappingProxyType({k: deep_freeze(v) for k, v in obj.items()})
    elif isinstance(obj, list):
        return tuple(deep_freeze(i) for i in obj)
    return obj

_table = {
    'H': {"atomic_number": 1, "atomic_weight": 1.008},
    "He": {"atomic_number": 2, "atomic_weight": 4.0026},
}

table = deep_freeze(_table)

table["H"]["atomic_weight"] = 45  

####################################
Solution 2:

class Element:
    __slots__ = (
        "name", "symbol", "a_num", "a_mass", "a_radius", "electron_config", 
        "electronegativity", "electron_affinity", "ionization_energies", 
        "e_class", "oxidation_nums", "melting_temp", "boiling_temp", "d", "yr",
        "_initialized"
    )
    
    def __init__(self, name, symbol, a_num, a_mass, a_radius, electron_config, 
                 electronegativity, electron_affinity, ionization_energies, e_class, 
                 oxidation_nums, melting_temp, boiling_temp, d, yr):
        # Durante __init__ l'attributo _initialized non esiste ancora
        self.name = name
        self.symbol = symbol
        self.a_num = a_num
        self.a_mass = a_mass
        self.a_radius = a_radius
        self.electron_config = electron_config
        self.electronegativity = electronegativity
        self.electron_affinity = electron_affinity
        self.ionization_energies = ionization_energies
        self.e_class = e_class
        self.oxidation_nums = oxidation_nums
        self.melting_temp = melting_temp
        self.boiling_temp = boiling_temp
        self.d = d
        self.yr = yr  
        # Impostiamo il flag per bloccare modifiche successive
        self._initialized = True

    def __setattr__(self, key, value):
        # Se _initialized è già True, significa che l'oggetto è stato inizializzato
        if hasattr(self, '_initialized'):
            raise AttributeError("Gli oggetti Element sono immutabili")
        super().__setattr__(key, value)

class Table:
    def __init__(self):
        # Definisci qui il dizionario con i dati grezzi degli elementi
        dati = {
            "O": {
                "name": "Ossigeno",
                "symbol": "O",
                "a_num": 8,
                "a_mass": 15.999,
                "a_radius": 66,
                "electron_config": "1s2 2s2 2p4",
                "electronegativity": 3.44,
                "electron_affinity": 141,
                "ionization_energies": [1314],
                "e_class": "non-metal",
                "oxidation_nums": [-2],
                "melting_temp": 54.36,
                "boiling_temp": 90.20,
                "d": 1.429,
                "yr": 1774
            },
            # Puoi aggiungere altri elementi
        }
        self.table = {}
        for key, value in dati.items():
            self.table[key] = Element(
                value["name"],
                value["symbol"],
                value["a_num"],
                value["a_mass"],
                value["a_radius"],
                value["electron_config"],
                value["electronegativity"],
                value["electron_affinity"],
                value["ionization_energies"],
                value["e_class"],
                value["oxidation_nums"],
                value["melting_temp"],
                value["boiling_temp"],
                value["d"],
                value["yr"]
            )
    
    def elem(self, ind):
        return self.table[ind]

t = Table()

# Proviamo a modificare un attributo
try:
    t.elem("O").yr = 10  # Questo solleverà un'eccezione
except AttributeError as e:
    print("Errore:", e)

print(t.elem("O").yr)
